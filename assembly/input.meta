.DATA

x = "awd";

.SYNTAX PROGRAM

PROGRAM = .LABEL("%define MAX_INPUT_LENGTH 65536")
	.LABEL("%include './lib/asm_macros.asm'")
	$((".DATA" .LABEL("section .data") $(DATA_DEFINITION))
	 | (".IMPORT" .LABEL("section .text") .STRING ->("import_meta_file " *))
	 | (".SYNTAX" .ID
		.LABEL("section .text")
		->("global _start")
		.LABEL("_start:")
		->("call _read_file_argument")
		->("call _read_file")
		->("call " *)
		->("mov eax, 1")
		->("mov ebx, 0")
		->("int 0x80")
  	$(DEFINITION) ".END"));

DATA_DEFINITION = .ID .RS(*) "=" DATA_TYPE ";";

DATA_TYPE = (.STRING ->(" db " * ", 0x00")) | (.NUMBER ->(" dd " *));

OUT1 = "*1" ->("call gn1")
	| "*2" ->("call gn2")
	| "*" ->("call copy_last_match")
	| "%" ->("vector_pop_string str_vector_8192")
				->("mov edi, eax")
				->("mov eax, 4")
				->("mov ebx, 1")
				->("mov ecx, [edi+4]")
				->("mov edx, [edi]")
				->("int 0x80")
	| "[" .ID ->("print_ref " *) "]"
	| .STRING ->("print " *);

OUTPUT = ("->" "(" $ OUT1 ")" ->("call newline")
		| ".LABEL" ->("call label") "(" $ OUT1 ")" ->("call newline")
		| ".RS" "(" $ OUT1 ")")
		| ".OUT" "(" $ OUT1 ")";

EX3 = .ID ->("vstack_push 0xFFFF") ->("call " *) ->("call vstack_pop")
	| .STRING           ->("test_input_string " *)
	| ".ID"             ->("call test_for_id")
	| ".RET"	->("ret")
	| ".NOT" (.STRING | .NUMBER) ->("match_not " *)
	| ".NUMBER"         ->("call test_for_number")
	| ".STRING"         ->("call test_for_string")
	| "%>"							->("vector_push_string_mm32 str_vector_8192, last_match")
	| "(" EX1 ")"
	| ".EMPTY" ->("call set_true")
	| "$" .LABEL(*1 ":") EX3 ->("je " *1) ->("call set_true");

EX2 = (EX3 ->("jne " *1) | OUTPUT) $ (EX3 ->("jne terminate_program") | OUTPUT) .LABEL(*1 ":");

EX1 = EX2 $ ("|" ->("je " *1) EX2) .LABEL(*1 ":");

DEFINITION = .ID .LABEL(* ":") "=" EX1 ";" ->("ret");

.END
