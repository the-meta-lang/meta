.SYNTAX LISP

LISP =
.DIRECT("section .data")
.DIRECT("fn_arg_count dd 0")
// Count of arguments that was actually used.
.DIRECT("used_arg_count dd 0")
.DIRECT("fn_arg_num dd 0")
// A boolean set to 1 if we're currently in the global scope.
.DIRECT("is_global db 1")
.DIRECT("section .bss")
.DIRECT("symbol_table resb 262144")
.DIRECT("section .text")
PREAMBLE $(ROOT_BODY) POSTAMBLE;

ROOT_BODY = COMMENT | "[" (DEFUNC | DEFINE | SET | ASMMACRO | WHILE | IF_ELSE | IF | ARITHMETIC | ASM | MOV | FUNC_CALL) "]";

// -------------------------------- Preamble -----------------------------------

PREAMBLE =
	.LABEL("section .text")
		->("global _start")
	.LABEL("_start:")
		->("push ebp")
		->("mov ebp, esp");

POSTAMBLE =
		->("mov esp, ebp")
		->("pop ebp")
		->("mov ebx, eax")
		->("mov eax, 1")
		->("int 0x80");

// ---------------------------------- body -------------------------------------

BODY = COMMENT | "[" (DEFINE | SET | WHILE | IF_ELSE | IF | ARITHMETIC | ASM | MOV | RETURN | FUNC_CALL) "]";

// --------------------------------- arithmetic --------------------------------

ARITHMETIC = ("+" BINOP_ARGS
	->("add eax, ebx")
	| "-" BINOP_ARGS
		->("sub eax, ebx")
	| "*" BINOP_ARGS
		->("imul eax, ebx")
	| "/" BINOP_ARGS
		->("div ebx")
	// Modulo
	| "%" BINOP_ARGS
		->("xor edx, edx")
		->("div ebx")
		->("mov eax, edx")
	| "&&" BINOP_ARGS
		->("and eax, ebx")
	| "||" BINOP_ARGS
		->("or eax, ebx")
	| "<=" BINOP_ARGS
		->("cmp eax, ebx")
		->("mov eax, 0")
		->("setle al")
	| ">=" BINOP_ARGS
		->("cmp eax, ebx")
		->("mov eax, 0")
		->("setge al")
	| "==" BINOP_ARGS
		->("cmp eax, ebx")
		->("mov eax, 0")
		->("sete al")
	| "!=" BINOP_ARGS
		->("cmp eax, ebx")
		->("mov eax, 0")
		->("setne al")
	// Bitwise left-shift
	| "<<" BINOP_ARGS
		->("mov ecx, ebx")
		->("shl eax, cl")
	// Bitwise right-shift
	| ">>" BINOP_ARGS
		->("mov ecx, ebx")
		->("shr eax, cl")
	// Xor
	| "^" BINOP_ARGS
		->("xor eax, ebx")
	| "<" BINOP_ARGS
		->("cmp eax, ebx")
		->("mov eax, 0")
		->("setl al")
	| ">" BINOP_ARGS
		->("cmp eax, ebx")
		->("mov eax, 0")
		->("setg al"));

// --------------------------------- return ------------------------------------

RETURN = "return" CALL_ARGS
	->("mov esp, ebp")
	->("pop ebp")
	->("ret");

// ---------------------------------- while ------------------------------------

WHILE = "while" "["
	.LABEL(*2 ":")
		(FUNC_CALL | ARITHMETIC)
	->("cmp eax, 1") 
	->("jne " *1) "]"
		$(BODY)
	->("jmp " *2)
	.LABEL(*1 ":");

// ----------------------------------- if --------------------------------------

IF = "if" "[" (FUNC_CALL | ARITHMETIC)
	->("cmp eax, 1")
	->("jne " *1) "]" $BODY
	.LABEL(*1 ":");

// --------------------------------- if/else -----------------------------------

IF_ELSE = "if/else" "[" (FUNC_CALL | ARITHMETIC)
	->("cmp eax, 1")
	->("jne " *1) "]"
	"[" $BODY "]"
	->("jmp " *2)
	.LABEL(*1 ":")
	"[" $BODY "]"
	.LABEL(*2 ":");

// ----------------------------- Assembler Macro -------------------------------

ASMMACRO = "asmmacro" "[" ID 
	->("jmp " *1)
	.LABEL(* ":")
		->("push ebp")
		->("mov ebp, esp") $(ID) "]"
	$(RAW ->(*))
		->("mov esp, ebp")
		->("pop ebp")
		->("ret")
	.LABEL(*1 ":");

// ----------------------------------- asm -------------------------------------

ASM = "asm" RAW ->(*);

MOV = "mov" ID %(*) (
	(SYMBOL_TABLE_ID | "[" (FUNC_CALL | ARITHMETIC) "]")
		->("mov " % ", eax")
	| NUMBER
		->("mov " % ", " *));

// --------------------------------- define ------------------------------------

DEFINE = "define" ID % %
	// write the index into the symbol table
	// If we're in the global scope we need to open a data section here
	.DIRECT("cmp byte [is_global], 1")
	.DIRECT("jne define_local")
	// According to the symbol table specification we need to add 0x80000000 (first bit of 32 bit int) to signal a global variable
	// As we don't need positional information for a global, we can ignore adding fn_arg_num or incrementing it
	.DIRECT("mov edx, 0x80000000")
	.DIRECT("mov edi, symbol_table")
	.DIRECT("mov esi, last_match")
	.DIRECT("call hash_set")
	.DIRECT("jmp define_end")
	.DIRECT("define_local:")
	.DIRECT("inc dword [fn_arg_num]")
	.DIRECT("mov edx, dword [fn_arg_num]")
	.DIRECT("mov edi, symbol_table")
	.DIRECT("mov esi, last_match")
	.DIRECT("call hash_set")
	.DIRECT("define_end:") (
	(NUMBER
		MOV_INTO ->(* " ; define " %))
	| (STRING 
	.LABEL("section .data")
		->(*3 " db " * ", 0x00")
	.LABEL("section .text")
		MOV_INTO ->(*3 " ; define " %))
	| (SYMBOL_TABLE_ID
		MOV_INTO ->("eax ; define " %))
	| ("[" (FUNC_CALL | ARITHMETIC) "]"
		MOV_INTO ->("eax ; define " %))
) // subtract 4 from the stack pointer so we don't accidentally overwrite the variable
	.DIRECT("cmp byte [is_global], 1")
	.DIRECT("je no_sub")
	->("sub esp, 4")
	.DIRECT("no_sub:");

MOV_INTO = 
	// We need to check whether we're in the global scope
	.DIRECT("cmp byte [is_global], 1")
	.DIRECT("jne mov_into_local")
	// If we're in the global scope we need to open a data section here
	.LABEL("section .bss")
	->(% " resd 0")
	.LABEL("section .text")
	.RS("mov dword [" % "], ")
	.DIRECT("jmp mov_end")
	.DIRECT("mov_into_local:")
	.RS("mov dword [ebp")
	// use the symbol table to get the index of the variable
	// then calculate the offset by doing `8 + (arg_count - index) * 4`
	.DIRECT("mov eax, dword [fn_arg_num]") // index is now in eax
	.DIRECT("mov ebx, dword [fn_arg_count]")
	.DIRECT("sub ebx, eax") // (arg_count - index)
	.DIRECT("imul eax, ebx, 4") // (arg_count - index) * 4
	.DIRECT("add eax, 8") // 8 + (arg_count - index) * 4
	.DIRECT("mov esi, eax")
	.DIRECT("mov edi, outbuff")
	.DIRECT("add edi, dword [outbuff_offset]")
	.DIRECT("call inttostrsigned")
	.DIRECT("add dword [outbuff_offset], eax")
	.RS("], ")
	.DIRECT("mov_end:");

// ----------------------------------- set -------------------------------------
SET = "set!" ID %("" *) %("" *) (
	(NUMBER 
		SET_INTO ->(* " ; set "))
	| (STRING 
	.LABEL("section .data")
		->(*3 " db " * ", 0x00")
	.LABEL("section .text")
		SET_INTO ->(*3 " ; set "))
	| (SYMBOL_TABLE_ID 
		SET_INTO ->("eax ; set "))
	| ("[" (FUNC_CALL | ARITHMETIC) "]"
		SET_INTO ->("eax ; set "))
);

SET_INTO = 
	.DIRECT("mov edi, symbol_table")
	.DIRECT("mov esi, str_vector_8192")
	.DIRECT("call vector_pop_string")
	.DIRECT("mov esi, eax")
	.DIRECT("call hash_get") // Variable information now in eax
		// We need to check whether we're in the global scope
	.DIRECT("cmp eax, 0x80000000")
	.DIRECT("jne set_into_local")
	.RS("mov dword [" % "], ")
	.DIRECT("jmp set_into_end")
	.DIRECT("set_into_local:")
	.DIRECT("push eax")
	.RS("mov [ebp")
	.DIRECT("pop eax")
	// set the value of the variable
	// we can use the symbol table to get the index of the variable
	// then calculate the offset by doing `8 + (arg_count - index) * 4`
	.DIRECT("mov ebx, dword [fn_arg_count]")
	.DIRECT("sub ebx, eax") // (arg_count - index)
	.DIRECT("imul eax, ebx, 4") // (arg_count - index) * 4
	.DIRECT("add eax, 8") // 8 + (arg_count - index) * 4
	.DIRECT("mov esi, eax")
	.DIRECT("mov edi, outbuff")
	.DIRECT("add edi, dword [outbuff_offset]")
	.DIRECT("call inttostrsigned")
	.DIRECT("add dword [outbuff_offset], eax")
	.RS("], ")
	.DIRECT("set_into_end:");

// --------------------------------- defunc ------------------------------------

DEFUNC = "defunc"
	.DIRECT("mov byte [is_global], 0")
	"[" ID
	->("jmp " *1)
	.LABEL(* ":")
		->("push ebp")
		->("mov ebp, esp")
	.DIRECT("mov dword [fn_arg_num], 0")
	$(ID
	// We found a new argument, we need to put it into the symbol table
	// with it's index as a value
	.DIRECT("inc dword [fn_arg_count] ; found new argument!")
	.DIRECT("inc dword [fn_arg_num]")
	.DIRECT("mov edx, dword [fn_arg_num]")
	.DIRECT("mov edi, symbol_table")
	.DIRECT("mov esi, last_match")
	.DIRECT("call hash_set"))
	// increase the arg num to `arg_num + 2` to make space for the return address and the old ebp
	// this will make it possible to use `8 + (arg_count - index) * 4` to get the offset of local variables
	.DIRECT("add dword [fn_arg_num], 2")
	"]"
		$(BODY)
	.DIRECT("mov dword [fn_arg_count], 0")
	.DIRECT("mov dword [fn_arg_num], 0")
		->("mov esp, ebp")
		->("pop ebp")
		->("ret")
	.LABEL(*1 ":")
	.DIRECT("mov byte [is_global], 1");



// ------------------------------ Function Call --------------------------------

FUNC_CALL = ID %
	.DIRECT("mov dword [used_arg_count], 0")
	CALL_ARGS
	->("call " %)
	// TODO: This has to pop the number of arguments the function had from the stack. Not just 2
	.DIRECT("loop_pop_args:")
	.DIRECT("cmp dword [used_arg_count], 0")
	.DIRECT("je loop_pop_args_end")
	->("pop edi")
	.DIRECT("dec dword [used_arg_count]")
	.DIRECT("jmp loop_pop_args")
	.DIRECT("loop_pop_args_end:");

// ------------------------- Function Call Arguments ---------------------------

// [add 1 2 [add 3 4]]
//
// mov esi, 3
// mov edi, 4
// call add
// mov ebx, eax
// mov esi, 1
// mov edi, 2

// CALL_ARGS = $((NUMBER %("mov esi, " *)
// 	| ("[" (FUNC_CALL | ARITHMETIC) "]" 
// 		%("")
// 		->("mov esi, eax"))
// 	| SYMBOL_TABLE_ID
// 		%("")) $((
// 			NUMBER %("mov edi, " *)
// 		| ("[" (FUNC_CALL | ARITHMETIC) "]" 
// 			%("")
// 			->("mov edi, eax"))
// 		| SYMBOL_TABLE_ID
// 			%("")) $((
// 				NUMBER %("mov edx, " *)
// 			| "[" (FUNC_CALL | ARITHMETIC) "]"
// 				%("")
// 				->("mov edx, eax")) $((
// 					NUMBER %("mov ecx, " *)
// 				| "[" (FUNC_CALL | ARITHMETIC) "]"
// 					%("")
// 					->("mov ecx, eax")) $((
// 							NUMBER %("push " *)
// 						| "[" (FUNC_CALL | ARITHMETIC) "]"
// 							%("")
// 						->("push eax")))
// 						// TODO: Unlimited arguments possible. Push onto the stack n times. Capture n while looping.
// 					->(%))
// 				->(%))
// 			->(%))
// 		->(%));

CALL_ARGS = $((
			NUMBER %("push " *)
		| "[" (FUNC_CALL | ARITHMETIC) "]"
			%("")
		->("push eax")
		| SYMBOL_TABLE_ID
			%("push eax")
		| STRING_ARG) 
		->(%)
		.DIRECT("inc dword [used_arg_count]"))
	;

STRING_ARG = STRING 
			.LABEL("section .data")
				->(*3 " db " * ", 0x00")
			.LABEL("section .text")
				%("")
				->("push " *3);


BINOP_ARGS = $((NUMBER %("mov eax, " *)
	| ("[" (FUNC_CALL | ARITHMETIC) "]" 
		%(""))
	// TODO: SYMBOL_TABLE_ID Outputs directly. It should push the value onto the stack.
	| SYMBOL_TABLE_ID
		%("")) $((
			NUMBER %("mov ebx, " *)
		| ("[" (FUNC_CALL | ARITHMETIC) "]" 
			%("")
			//->("mov ebx, eax")
			)
		| SYMBOL_TABLE_ID_EBX
			%("")) 
			->(%))
		->(%));

// TODO: Use argument *op
// TODO: Needs META Compiler to support string concat in % operator.
CALL_ARG<op> = (NUMBER %("mov esi, ") %(*)
	| "[" (FUNC_CALL | ARITHMETIC) "]" 
		%("") %("")
		->("mov esi, eax"));

// ----------------------------- Symbol Table Id -------------------------------

// TODO: Replace with SYMBOL_TABLE_ID<reg>
SYMBOL_TABLE_ID = ID 
	.DIRECT("mov edi, symbol_table")
	.DIRECT("mov esi, last_match")
	.DIRECT("call hash_get") // Variable information now in eax
		// We need to check whether we're in the global scope
	.DIRECT("cmp eax, 0x80000000")
	.DIRECT("jne st_local")
	->("mov eax, dword [" * "]")
	.DIRECT("jmp st_end")
	.DIRECT("st_local:")
	// We need to get the index of the argument from the symbol table
	// We can do this by doing `8 + (arg_count - index) * 4`
	// This will account for the 8 bytes of the function call (esp and ip)
	.DIRECT("push eax")
	.RS("mov eax, dword [ebp")
	.DIRECT("pop eax")
	.DIRECT("mov ebx, dword [fn_arg_count]")
	.DIRECT("sub ebx, eax") // (arg_count - index)
	.DIRECT("imul eax, ebx, 4") // (arg_count - index) * 4
	.DIRECT("add eax, 8") // 8 + (arg_count - index) * 4
	.DIRECT("mov esi, eax") // print the number
	.DIRECT("mov edi, outbuff")
	.DIRECT("add edi, dword [outbuff_offset]")
	.DIRECT("call inttostrsigned")
	.DIRECT("add dword [outbuff_offset], eax")
	->("] ; get " *)
	.DIRECT("st_end:");

SYMBOL_TABLE_ID_EBX = ID 
	.DIRECT("mov edi, symbol_table")
	.DIRECT("mov esi, last_match")
	.DIRECT("call hash_get") // Variable information now in eax
		// We need to check whether we're in the global scope
	.DIRECT("cmp eax, 0x80000000")
	.DIRECT("jne st_ebx_local")
	->("mov ebx, dword [" * "]")
	.DIRECT("jmp st_ebx_end")
	.DIRECT("st_ebx_local:")
	// We need to get the index of the argument from the symbol table
	// We can do this by doing `8 + (arg_count - index) * 4`
	// This will account for the 8 bytes of the function call (esp and ip)
	.DIRECT("push eax")
	.RS("mov ebx, dword [ebp")
	.DIRECT("pop eax")
	.DIRECT("mov ebx, dword [fn_arg_count]")
	.DIRECT("sub ebx, eax") // (arg_count - index)
	.DIRECT("imul eax, ebx, 4") // (arg_count - index) * 4
	.DIRECT("add eax, 8") // 8 + (arg_count - index) * 4
	.DIRECT("mov esi, eax") // print the number
	.DIRECT("mov edi, outbuff")
	.DIRECT("add edi, dword [outbuff_offset]")
	.DIRECT("call inttostrsigned")
	.DIRECT("add dword [outbuff_offset], eax")
	->("] ; get " *)
	.DIRECT("st_ebx_end:");

// -------------------------------- Comments -----------------------------------

COMMENT = "//" .NOT 10;

.TOKENS

// Remove any leading whitespace
PREFIX = $.ANY(32!9!13!10);

// Match numbers (sequence of digits)
NUMBER = PREFIX .TOKEN DIGIT $DIGIT .DELTOK;

// Match any digit
DIGIT  = .ANY(48:57);

// Match any sequence of characters and digits, may not start with a digit.
ID     = PREFIX .TOKEN ALPHA $(ALPHA | DIGIT) .DELTOK;

// Matches any uppercase or lowercase character as well as underscore
ALPHA  = .ANY(65:90!95!97:122) ;

// Matches anything but double quotes that is enclosed by double quotes.
// e.g. "hello world" but not "awd "inner" "
STRING = PREFIX .TOKEN .ANY(34) $.ANYBUT(13!10!34) .ANY(34) .DELTOK;

// Same as STRING but does not capture the double quotes.
RAW 	 = PREFIX .ANY(34) .TOKEN $.ANYBUT(13!10!34) .DELTOK .ANY(34);