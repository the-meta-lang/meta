[defunc [derefb mem]
	[asm "mov ebx, dword [ebp+8]"]
	[asm "xor eax, eax"]
	[asm "mov al, byte [ebx]"]]

[defunc [derefdw mem]
	[asm "mov ebx, dword [ebp+8]"]
	[asm "xor eax, eax"]
	[asm "mov eax, dword [ebx]"]]

[defunc [strlen string]
	[define length 0]
	[while [!= [derefb [+ string length]] 0]
		[set! length [+ length 1]]]
	[return length]]

[defunc [setmemb loc value]
	[asm "mov al, byte [ebp+8]"]
	[asm "mov ebx, dword [ebp+12]"]
	[asm "mov byte [ebx], al"]]

[defunc [setmemdw loc value]
	[asm "mov eax, dword [ebp+8]"]
	[asm "mov ebx, dword [ebp+12]"]
	[asm "mov dword [ebx], eax"]]

[defunc [printstr string] //ebp+8
	[define i 0] //ebp-4
	[define length [strlen string]] // ebp-8
	[asm "mov eax, 4"]
	[asm "mov ebx, 1"]
	[asm "mov ecx, dword [ebp+8]"]
	[asm "mov edx, dword [ebp-8]"]
	[asm "int 0x80"]]

[defunc [strcat dest source]
	[define destlength [strlen dest]]
	[define sourcelength [strlen source]]
	[define needed [+ destlength sourcelength]]
	[define space [malloc needed]]
	[define i 0]
	[while [!= i destlength]
		[setmemb [+ space i] [derefb [+ dest i]]]
		[set! i [+ i 1]]]
	[define j 0]
	[while [!= j sourcelength]
		[setmemb [+ space i] [derefb [+ source j]]]
		[set! i [+ i 1]]
		[set! j [+ j 1]]]
	[return space]]

[defunc [one_at_a_time string]
	[define i 0]
	[define hash 0]
	[while [!= [derefb [+ string i]] 0]
		[set! hash [+ hash [derefb [+ string i]]]]
		[set! hash [+ hash [<< hash 10]]]
		[set! hash [^ hash [>> hash 6]]]
		[set! i [+ i 1]]]
	[set! hash [+ hash [<< hash 3]]]
	[set! hash [^ hash [>> hash 11]]]
	[set! hash [+ hash [<< hash 15]]]
	[return hash]]

[defunc [hash_set hashmap key value]
	[define hash [one_at_a_time key]]
	[set! hash [% hash 32768]]
	[setmemdw [+ hashmap hash] value]
	[return value]]

[defunc [hash_get hashmap key]
	[define hash [one_at_a_time key]]
	[set! hash [% hash 32768]]
	[return [derefdw [+ hashmap hash]]]]

[premalloc 0]
[printstr [strcat "Hey " "You"]]

[define hashmap [malloc 32768]]

[defunc [main]
	[hash_set hashmap "Key" 4]
	[hash_get hashmap "Key"]]

[main]