.DATA

last_match = { 512 };

// This is the symbol table
// It is used to keep track of the variables and their memory locations
ST = { 65536 };

// This is the symbol table offset
STO = 12;

// This number keeps track of the number of variables in the current context frame
// e.g. the function body
VAR_IN_BODY = 0;

// This boolean checks if we are currently evaluating the second operand in a arithmetic expression.
// Without this we would have to rely on the stack instead of directly using eax and ebx in calculations.
AEXP_SEC_NUM = 0;

EAX_WAS_NUMBER = 0;
EBX_WAS_NUMBER = 0;

.SYNTAX PROGRAM

// .INCLUDE "./gyro/includes/while-statement.meta";
// .INCLUDE "./gyro/includes/let-expression.meta";
// .INCLUDE "./gyro/includes/if-statement.meta";
// .INCLUDE "./gyro/includes/arithmetic.meta";

PROGRAM = 
.LABEL("section .text")
	->("global _start")
.LABEL("_start:")
->("push ebp")
->("mov ebp, esp")
$ (LET_EXPRESSION ";" | COMMENT | FN_EXPRESSION | DIRECT_ASSEMBLY_EXPRESSION ";" | FN_CALL ";" | IF_STATEMENT | WHILE_STATEMENT | ASSIGNMENT_EXPRESSION)
->("pop ebp")
->("mov eax, 1")
->("mov ebx, 0")
->("int 0x80");

FN_EXPRESSION = "fn" ->("jmp " *1) .ID .LABEL(* ":") ->("push ebp") ->("mov ebp, esp") "(" 
$(.ID [hash-set *ST *last_match [set STO [+ STO 4]]] [set VAR_IN_BODY [+ VAR_IN_BODY 1]] ->("mov dword [ebp+" [>> STO] "], edi"))
$(("," .ID [hash-set *ST *last_match [set STO [+ STO 4]]] [set VAR_IN_BODY [+ VAR_IN_BODY 1]] ->("mov dword [ebp+" [>> STO] "], esi"))
	$("," .ID [hash-set *ST *last_match [set STO [+ STO 4]]] [set VAR_IN_BODY [+ VAR_IN_BODY 1]] ->("mov dword [ebp+" [>> STO] "], edx") 
		$("," .ID [hash-set *ST *last_match [set STO [+ STO 4]]] [set VAR_IN_BODY [+ VAR_IN_BODY 1]] ->("mov dword [ebp+" [>> STO] "], ecx")
			$("," .ID [hash-set *ST *last_match [set STO [+ STO 4]]] [set VAR_IN_BODY [+ VAR_IN_BODY 1]]))))
")" "{" 
	BODY 
"}" 
		[set STO [- STO [* VAR_IN_BODY 4]]]
		->("pop ebp")
		->("ret") 
		.LABEL(*1 ":");

// Function Body
BODY = $(RETURN_EXPRESSION ";" | IF_STATEMENT | COMMENT | WHILE_STATEMENT | LET_EXPRESSION ";" | DIRECT_ASSEMBLY_EXPRESSION ";" | FN_CALL ";" | FN_EXPRESSION | ASSIGNMENT_EXPRESSION);

FN_CALL = .ID %> "(" FN_CALL_ARGUMENTS ")" ->("call " %);

// Function Call Arguments
// A list of arguments passed when calling a function
// @example: add(1, num) <- 1 and `num` are the arguments
FN_CALL_ARGUMENTS = 
$(.NUMBER ->("mov edi, " *)
	| .ID ->("mov edi, dword [ebp+" [hash-get *ST *last_match] "]")
	| "*" .ID ->("mov edi, dword ebp+" [hash-get *ST *last_match])
	| .STRING 
		.LABEL("section .data")
			->(*3 " db " * ", 0x00")
		.LABEL("section .text")
			->("mov edi, " *3))
$("," (.NUMBER ->("mov esi, " *)
	| .ID ->("mov esi, dword [ebp+" [hash-get *ST *last_match] "]")
	| "*" .ID ->("mov esi, dword ebp+" [hash-get *ST *last_match])
	| .STRING 
		.LABEL("section .data")
			->(*3 " db " * ", 0x00")
		.LABEL("section .text")
			->("mov esi, " *3))
	$("," (.NUMBER ->("mov edx, " *)
		| .ID ->("mov edx, dword [ebp+" [hash-get *ST *last_match] "]")
		| "*" .ID ->("mov edx, dword ebp+" [hash-get *ST *last_match])
		| .STRING 
			.LABEL("section .data")
				->(*3 " db " * ", 0x00")
			.LABEL("section .text")
				->("mov edx, " *3))
		$("," (.NUMBER ->("mov ecx, " *)
			| .ID ->("mov ecx, dword [ebp+" [hash-get *ST *last_match] "]")
			| "*" .ID ->("mov ecx, dword ebp+" [hash-get *ST *last_match])
			| .STRING 
				.LABEL("section .data")
					->(*3 " db " * ", 0x00")
				.LABEL("section .text")
					->("mov ecx, " *3))
			$("," (.NUMBER ->("push " *)
				| .ID ->("push [" * "]")
				| "*" ->("push " *)
				| .STRING 
					.LABEL("section .data")
						->(*3 " db " * ", 0x00")
					.LABEL("section .text")
						->("push " *3))))));



// Arithmetic Expressions
// These follow the precedence set by the C language
// https://en.cppreference.com/w/c/language/operator_precedence
AEXP = EX1 [set AEXP_SEC_NUM 0] $(
	("=" EX1 
		->("mov dword [ebp+" [hash-get *ST *last_match] "], eax"))
	// NOTE: Since the other operators take precedence over the arithmetic assignment operators,
	// we need to check for them first
	// This will destroy precedence though, so we need to think of a better solution...
	| ("+=" EX1 
		->("add dword [ebp+" [hash-get *ST *last_match] "], eax"))
	| ("-=" EX1
		->("sub dword [ebp+" [hash-get *ST *last_match] "], eax"))
	// Assignment by product, quotient, and remainder
	| ("*=" EX1
		->("imul dword [ebp+" [hash-get *ST *last_match] "]"))
	| ("/=" EX1
		->("idiv dword [ebp+" [hash-get *ST *last_match] "], eax"))
	| ("%=" EX1
		->("idiv dword [ebp+" [hash-get *ST *last_match] "], eax")
		->("push edx"))
	// Assignment by bitwise left shift and right shift
	| ("<<=" EX1
		->("shl dword [ebp+" [hash-get *ST *last_match] "], eax"))
	| (">>=" EX1
		->("shr dword [ebp+" [hash-get *ST *last_match] "], eax"))
	// Assignment by bitwise AND, XOR, and OR
	| ("&=" EX1
		->("and dword [ebp+" [hash-get *ST *last_match] "], eax"))
	| ("^=" EX1
		->("xor dword [ebp+" [hash-get *ST *last_match] "], eax"))
	| ("|=" EX1
		->("or dword [ebp+" [hash-get *ST *last_match] "], eax"))
);

// Ternary Conditional
EX1 = EX2 $("?" 
			->("cmp eax, 0")
			// Result is null, if so jump over the true condition
			->("je " *1)
				EX2
			// Don't invoke the false condition if the true condition is true
			->("jmp " *2) ":"
		.LABEL(*1 ":") EX2
		.LABEL(*2 ":"));

// Logical OR
EX2 = EX3 $("||" EX3 
			->("or eax, ebx"));

// Logical AND
EX3 = EX4 $("&&" EX4 
			->("and eax, ebx"));

// Bitwise OR
EX4 = EX5 $("|" EX5 
			->("or eax, ebx"));

// Bitwise XOR
EX5 = EX6 $("^" EX6 
			->("xor eax, ebx"));

// Bitwise AND
EX6 = EX7 $("&" EX7 
			->("and eax, ebx"));

// Relational == and !=
EX7 = EX8 [set AEXP_SEC_NUM 0] $("==" [set AEXP_SEC_NUM 1] EX9
			->("cmp eax, ebx")
			->("je " *1)
			->("mov eax, 0")
			->("jmp " *2) 
		.LABEL(*1 ":")
			->("mov eax, 1")
		.LABEL(*2 ":")
		| "!=" EX9 
			->("cmp eax, ebx")
			->("jne " *1)
			->("mov eax, 0")
			->("jmp " *2) 
		.LABEL(*1 ":")
			->("mov eax, 1")
		.LABEL(*2 ":"));

// Comparison / Relational Operators
EX8 = EX9 $("<=" EX9 
			->("cmp eax, ebx")
			->("jle " *1)
			->("mov eax, 0")
			->("jmp " *2) 
		.LABEL(*1 ":")
			->("mov eax, 1")
		.LABEL(*2 ":")
		| ">=" EX9 
			->("cmp eax, ebx")
			->("jge " *1)
			->("mov eax, 0")
			->("jmp " *2)
		.LABEL(*1 ":")
			->("mov eax, 1")
		.LABEL(*2 ":")
		| "<" EX9 
			->("cmp eax, ebx") 
			->("jl " *1) 
			->("mov eax, 0") 
			->("jmp " *2) 
		.LABEL(*1 ":") 
			->("mov eax, 1") 
		.LABEL(*2 ":")
		| ">" EX9
			->("cmp eax, ebx")
			->("jg " *1)
			->("mov eax, 0")
			->("jmp " *2)
		.LABEL(*1 ":")
			->("mov eax, 1")
		.LABEL(*2 ":"));

// Bitwise left and right shift
EX9 = EX10 $("<<" EX10 
			->("shl eax, ebx") 
		| ">>" EX10 
			->("shr eax, ebx"));

EX10 = EX11 [set AEXP_SEC_NUM 0] $("+" [set AEXP_SEC_NUM 1] EX11   ->("add eax, ebx") 
		| "-" EX11   ->("sub eax, ebx") );

EX11 = EX12 [set AEXP_SEC_NUM 0] $("*" [set AEXP_SEC_NUM 1] EX12
			->("imul ebx")
		| "/" [set AEXP_SEC_NUM 1] EX12
			->("idiv eax, ebx")
		| "%" [set AEXP_SEC_NUM 1] EX12 
			->("idiv eax, ebx")
			->("push edx"));

// TODO: Exponentiation
EX12 = EX13 [set AEXP_SEC_NUM 0] $("**" [set AEXP_SEC_NUM 1] EX12 
						->("exp"));

EX13 = "++" EX14
			->("mov eax, dword [ebp+" [hash-get *ST *last_match] "]")
			->("inc eax")
			->("mov dword [ebp+" [hash-get *ST *last_match] "], eax")
		| "--" EX14
			->("mov eax, dword [ebp+" [hash-get *ST *last_match] "]")
			->("dec eax")
			->("mov dword [ebp+" [hash-get *ST *last_match] "], eax")
		// Dereference
		| "*" .ID
			->("mov eax, dword [ebp+" [hash-get *ST *last_match] "]")
			->("mov eax, dword [eax]")
		// Address of
		| "&" .ID 
			->("lea eax, [ebp+" [hash-get *ST *last_match] "]")
		| "+" EX14 
		| "-" EX14 
			->("neg eax")
		| EX14;

EX14 = .ID %> (("(" $ FN_CALL_ARGUMENTS ")" ->("call " %)) 
			// Post increment operator
			| "++" 
				->("inc dword [ebp+" [hash-get *ST *last_match] "]")
			// Post decrement operator
			| "--"
				->("dec dword [ebp+" [hash-get *ST *last_match] "]")
			| .EMPTY ([<< AEXP_SEC_NUM] ->("mov eax, dword [ebp+" [hash-get *ST *last_match] "]") | ->("mov ebx, dword [ebp+" [hash-get *ST *last_match] "]") .DIRECT("call set_true")))
		| .NUMBER ([<< AEXP_SEC_NUM] ->("mov eax, " *) | ->("mov ebx, " *) .DIRECT("call set_true"))
		| .STRING (.LABEL("section .data") ->(*3 " db " * ", 0x00") .LABEL("section .text") ([<< AEXP_SEC_NUM] ->("mov eax, " *3) | ->("mov ebx, " *3) .DIRECT("call set_true")))
		| "(" AEXP ")";

// SECTION Expressions

DIRECT_ASSEMBLY_EXPRESSION = "asm" .STRING_RAW ->(*);

COMMENT = "//" .NOT 10;

IF_STATEMENT = "if" "(" AEXP ")" 
	->("cmp eax, 0")
	->("je " *1) "{"
		BODY 
	"}"
	->("jmp " *2)
	.LABEL(*1 ":")
		$(ELIF) $(ELSE)
	.LABEL(*2 ":");

ELIF = "elif" "(" AEXP ")" 
		->("cmp eax, 0")
		->("jne " *1) "{"
			BODY 
		"}"
		.LABEL(*1 ":");

ELSE = "else" "{" 
		BODY 
	"}";

LET_EXPRESSION = "let" .ID 
	[hash-set *ST *last_match [set STO [+ STO 4]]]
	[set VAR_IN_BODY [+ VAR_IN_BODY 1]] "=" AEXP
		->("mov dword [ebp+" [>> STO] "], eax");

ASSIGNMENT_EXPRESSION = .ID "=" AEXP 
		->("mov dword [ebp+" [hash-get *ST *last_match] "], eax");

WHILE_STATEMENT = "while" .LABEL(*2 ":") "(" AEXP ")" "{" 
		->("cmp eax, 0")
		->("je " *1)
		BODY 
	"}"
	->("jmp " *2)
	.LABEL(*1 ":");

// Return Expression
// @example: return 1;
// Set AEXP_SEC_NUM to 0 to indicate that we are evaluating the second operand in the arithmetic expression
// This will make it so that the last value will always be in eax
RETURN_EXPRESSION = "return" [set AEXP_SEC_NUM 0] AEXP;




.END
