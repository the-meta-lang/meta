[define [crc32 *input]
	[define divisor 3988292384]
	[define crc 4294967295]
	[define i 0]
	[while [!= &1[+ input i] 0]
		[define byte &1[+ input i]]
		[set crc [xor crc byte]]
		[define j 0]
		[while [!= j 8]
			[if [and crc 1]
				[set crc [xor [zfrs crc 1] divisor]]
				[set crc [zfrs crc 1]]]
			[set j [+ j 1]]]
		[set i [+ i 1]]]
	[return [xor crc 4294967295]]]

[define [xor num1 num2]
	[asm "xor edi, esi"]
	[asm "mov eax, edi"]]

[define [zfrs num1 num2]
	[asm "mov eax, esi"]
	[asm "mov cl, al"]
	[asm "shr edi, cl"]
	[asm "mov eax, edi"]]

[define [and num1 num2]
	[asm "and edi, esi"]
	[asm "mov eax, edi"]]

[define [print_int num]
	[define space [reserve 10]]
	[define i 0]
	[define length 0]
	[while [!= num 0]
		[define mod [+ [% num 10] 48]]
		[memset [+ space i] mod]
		[set num [/ num 10]]
		[set i [+ i 1]]
		[set length [+ length 1]]]
	[define j 0]
	[while [>= i 0]
		[- [+ space length] j]
		[asm "mov ecx, eax"]
		[asm "mov eax, 4"]
		[asm "mov ebx, 1"]
		[asm "mov edx, 1"]
		[asm "int 0x80"]
		[set j [+ j 1]]
		[set i [- i 1]]]]

[define [memget mem]
	[asm "mov eax, [edi]"]]

[define [memset mem value]
	[asm "mov [edi], esi"]]

[print_int [crc32 "Hello"]]