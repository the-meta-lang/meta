// pointer to free memory, 4 bytes
[reserve ptr_wilderness 4]
// pointer to end of bss, 4 bytes
[reserve ptr_bss_end 4]
// free bin stores freed chunks with single linked list starting at fd_ptr, 4 bytes
[reserve fbin 4]

[define [premalloc space]
	[asm "mov dword [ptr_wilderness], fbin + 8"]
	[asm "mov dword [ptr_bss_end], fbin + 8"]
	[asm "mov ebx, edi"]
	[asm "add ebx, [ptr_bss_end]"]
	[asm "mov eax, 0x2d"]
	[asm "int 0x80"]
	[asm "add dword [ptr_bss_end], edi"]]

[define [free *pt]
	[asm "mov ebx, [fbin]"]
	[asm "mov [edi - 4], ebx"]
	[asm "mov [fbin], edi"]]

[define [malloc size]
		// --assert_prewalloced--
		[asm "mov edx, [ptr_wilderness]"]
		// check if edx is zero, ensure the wilderness pointer is set
		[asm "test edx, edx"]
		[asm "je .error"]

		// --store_req_space--
		// add space for metadata to do size check
		[asm "add edi, 8"]

		// --check_free_chunks--
		[asm "mov eax, [fbin]"]
		[asm "mov ebx, fbin + 4"]
		[asm ".size_check_loop:"]
		[asm "test eax, eax"]
		// if end of free chunks, then use space of wilderness
		[asm "je .check_wilderness"]
		[asm "cmp edi, [eax - 8]"]
		[asm "jg .no_fit"]
		[asm "mov dword [eax - 8], edi"]
		// unlink_free
		[asm "mov ecx, [eax - 4]"]
		[asm "mov dword [ebx - 4], ecx"]
		[asm "jmp .return"]
		[asm ".no_fit:"]
		// save prev linked chunk in case of unlink
		[asm "mov ebx, eax"]
		// move fd pointer of current chunk into eax
		[asm "mov eax, [eax - 4]"]
		[asm "jmp .size_check_loop"]

		// --use-wilderness--
		[asm ".check_wilderness:"]
		// get_free_space
		// get end of program break
		[asm "mov eax, [ptr_bss_end]"]
		// total space - used space = available space
		[asm "sub eax, [ptr_wilderness]"]
		// compare available space to requested space
		[asm "cmp eax, edi"]
		// if available space is bigger than requested, set metadata
		[asm "jge .set_meta"]
		// remove excess space
		[asm "sub edi, eax"]
		// sbrk
		[asm "mov ebx, edi"]
    [asm "add ebx, [ptr_bss_end]"]
    [asm "mov eax, 0x2d"]
    [asm "int 0x80"]
    [asm "add dword [ptr_bss_end], edi"]

		// --write_size--
		[asm ".set_meta:"]
		// set size at pointer to wilderness or free chunk
		[asm "mov dword [edx], edi"]
		// increase pointer to wilderness by new chunk size
		[asm "add [ptr_wilderness], edi"]

		// --set_return_value--
		[asm "mov eax, edx ; move edx"]
		[asm "add eax, 8"]

		[asm ".return:"]
		[asm "pop ebp"]
		[asm "ret"]

		[asm ".error:"]
		[asm "xor eax, eax"]
		[asm "jmp .return"]]

[premalloc 0]
[define memory [malloc 20]]

[define [memwritestring *address *str]
	[define i 0]
	// Loop until we hit a null terminator
	[while [!= &1[+ str i] 0]
		[memwrite [+ address i] &1[+ str i]]
		[set i [+ i 1]]]
	[return i]]

[define [printm *pt]
	[define i 0]
	[while [!= &1[+ pt i] 0]
		[set i [+ i 1]]]
	[asm/mov edx i]
	[asm "mov eax, 4"]
	[asm "mov ebx, 1"]
	[asm "mov ecx, edi"]
	[asm "int 0x80"]]

[define [memwrite *address value]
	[asm "mov [edi], esi"]]

[memwritestring *memory "Hey"]

[printm *memory]

[free *memory]